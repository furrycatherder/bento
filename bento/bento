#! @bash@/bin/bash

set -euo pipefail

export NIX_PATH=${NIX_PATH:+$NIX_PATH:}bento='https://github.com/furrycatherder/bento/archive/master.tar.gz'

error() {
    echo "$(basename "$0"): $*" >&2
    exit 1
}

doBuild() {
    nix build -f '<bento>' "$@" stow
}

# overlayfs has the limitation that upperdir and workdir must be in separate
# subtrees of the same mount.  We tend to keep our /home directory on its own
# mount, so the workdirs are kept in /home/.stow-workdirs.  This is one of the
# implementation details preventing a rootless installation.
#
# We should be able to inspect the output of mount to get a list of overlays we
# created.  Try mount | grep overlay.
doActivate() {
    local stowDir workDir
    stowDir=$(readlink ~/.bento) || return 1
    workDir=$(mktemp -d "/home/.stow-workdirs/stow.XXXXXXXXXX")

    # This might return a list of workdirs, some (?) of which may not have been
    # created by us.
    overlayWorkdirs=($(mount | awk '/overlay/ {
        match($NF, /\(.+workdir=(.*)\)/, ary)
        print ary[1]
    }'))
    for workdir in "${overlayWorkdirs[@]}"; do
        if [[ $(readlink -f ~/.stow-workdir) == $workdir ]]; then
            doDeactivate
        fi
    done

    # This will abort if ~/.stow-workdir already exists, so we won't create
    # multiple overlays.  This doesn't stop someone else from overlaying $HOME
    # and borking everything anyway.  Maybe it would be better to use tmpfiles?
    ln -sfvT "$workDir" ~/.stow-workdir

    # TODO: add rollbacks and stuff?
    # TODO: use tmpfiles.d for garbage collection?
    # ln -sfvT "$stowDir" "/nix/var/nix/profiles/per-user/$USER/stow-env"

    # FIXME: fuse-overlayfs isn't working on NixOS so we'll need sudo mount
    # privilege for now.
    sudo mount -v -t overlay \
        -o workdir="$workDir" \
        -o lowerdir="$stowDir" \
        -o upperdir="$HOME" \
        overlay "$HOME"
}

doDeactivate() {
    # FIXME: there could be multiple overlays over $HOME.
    # FIXME: should be fusermount -z, requires sudo for now.
    sudo umount -v -l "$HOME"

    rm -rfv "$(readlink ~/.stow-workdir)"
    rm -v ~/.stow-workdir
}

cmd="$1"
shift 1

case "$cmd" in
    build)
        doBuild 
        ;;
    load)
        doBuild --out-link ~/.bento
        doActivate
        ;;
    unload)
        doDeactivate
        ;;
    *) 
        exit 1
        ;;
esac

# vim: set sw=4 ts=4 et ft=sh:
